{"1. Why Angular?":[{"title":"Why Angular?","content":"\nJavaScript is the most commonly used client-side scripting language. It is written into HTML documents to enable interactions with web pages in many unique ways. As a relatively easy-to-learn language with pervasive support, it is well-suited to develop modern applications. But is JavaScript ideal for developing single-page applications that require modularity, testability, and developer productivity? Perhaps not. These days, we have a variety of frameworks and libraries designed to provide alternative solutions. With respect to front-end web development, Angular addresses many, if not all, of the issues developers face when using JavaScript on its own.\n\nAngular Provide a collection of integrated libraries that cover a wide variety of features, including: routing forms management client server communication and more. Angular is designed to make updating as straightforward as possible so take advantage of the latest features development tools and libraries.\n","section":"1. Why Angular?","source":"https://www.simplilearn.com/"}],"10. What are the directive":[{"title":"What are the directives ?","content":"\nDirectives are classes that add new behavior or modify the existing behavior to the elements in the template. Basically directives are used to manipulate the DOM, for example adding/removing the element from DOM or changing the appearance of the DOM elements.\n\n**Example of Angular directive**\n\n```ts\n@Component({\n\tselector: 'my-app',\n\ttemplate: `\n\t\t<ul>\n\t\t\t<li *ngFor=\"let name of names\">\n\t\t\t\t{{ name }}\n\t\t\t</li>\n\t\t</ul>\n\t`,\n})\nexport class AppComponent {\n\tnames: string[]\n\tconstructor() {\n\t\tthis.names = ['John', 'Mary', 'Mike']\n\t}\n}\n```\n\nIn this above code, the `*ngFor` directive is used to iterate over the names array and display the names in the template.\n","section":"10. What are the directive","source":"https://angular.io"}],"11. What are the order of angular lifecycle hooks execution":[{"title":"What are the order of angular lifecycle hooks execution ?","content":"\nAngular gives us 8 hooks to allow us to tap into the lifecycle of our components and trigger actions at specific points in the lifecycle.\n\nHere are the lifecycle hooks available , in the order which they are invoked:\n\n1. ngOnChanges\n2. ngOnInit\n3. ngDoCheck\n4. ngAfterContentInit\n5. ngAfterContentChecked\n6. ngAfterViewInit\n7. ngAfterViewChecked\n8. ngOnDestroy\n\n**ngOnChanges** Called every time a data-bound input property changes. It’s called a first time before the ngOnInit hook. The hook receives a SimpleChanges object that contains the previous and current values for the data-bound inputs properties. This hook gets called often, so it’s a good idea to limit the amount of processing it does.\n\n**ngOnInit** Called once upon initialization of the component.\n\n**ngDoCheck** Use this hook instead of ngOnChanges for changes that Angular doesn’t detect. It gets called at every change detection cycle, so keeping what it does to a minimum is important for performance.\n\n**ngAfterContentInit** Called after content is projected in the component.\n\n**ngAfterContentChecked** Called after the projected content is checked.\n\n**ngAfterViewInit** Called after a component’s view or child view is initialized.\n\n**ngAfterViewChecked** Called after a component’s view or child view is checked.\n\n**ngOnDestroy** Called once when the component is destroyed and a good hook to use to cleanup and unsubscribe from observables.\n","section":"11. What are the order of angular lifecycle hooks execution","source":"https://angular.io"}],"12. What is lifecycle hooks":[{"title":"What is lifecycle hooks ?","content":"\nThe lifecycle of a component/directive is managed by Angular as it creates, checks, updates, renders, and destroys. To have a view of all these occurrences and respond to these moments, Angular provides lifecycle hooks that give us visibility into these. These lifecycle hooks can be implemented by the interfaces provided in the Angular Core Library. This is the same with components and directives. Every interface contains different lifecycle hook methods, named with the interface name prefixed with ng. Like the very commonly used lifecycle hook ngOnInit() is named as ng(prefix) and OnInit (interface name).\n","section":"12. What is lifecycle hooks","source":"https://www.dotnettricks.com"}],"13. What is change detection ?":[{"title":"What is change detection ?","content":"\nChange detection is the process through which angular checks to see whether your applications state has changed, and if any DOM needs to be update.\n","section":"13. What is change detection ?","source":"https://angular.io"}],"14. What is the use of ngOnChanges?":[{"title":"What is the use of ngOnChanges?","content":"\n`ngOnChanges` triggers following the modification of @Input bound class members. Data bound by the @Input() decorator come from an external source. When the external source alters that data in a detectable manner, it passes through the @Input property again.\n\nThe ngOnChanges hook, with it’s SimpleChanges object, is a little different. Here’s how you would implement it. Let’s say we have a component used like this:\n\n```html\n<my-todo [title]=\"title\" [content]=\"content\"></my-todo>\n```\n\nNow say that we want to do something when the title property changes:\n\n```ts\n@Component({\n\tselector: 'my-todo',\n\ttemplateUrl: './my-todo.component.html',\n\tstyleUrls: ['./my-todo.component.css'],\n})\nexport class MyTodoComponent implements OnChanges {\n\t@Input() title: string\n\t@Input() content: string\n\tconstructor() {}\n}\n```\n","section":"14. What is the use of ngOnChanges?","source":"https://angular.io"}],"15. Difference between Constructor and ngOnInit":[{"title":"Difference between Constructor and ngOnInit ?","content":"\nThe Constructor is a default method of the class that is executed when the class is instantiated and ensures proper initialisation of fields in the class and its subclasses. Angular, or better Dependency Injector (DI), analyses the constructor parameters and when it creates a new instance by calling new MyClass() it tries to find providers that match the types of the constructor parameters, resolves them and passes them to the constructor.\n\nngOnInit is a life cycle hook called by Angular to indicate that Angular is done creating the component.\n","section":"15. Difference between Constructor and ngOnInit","source":"https://angular.io"}],"16. What is the use of app root in Angular?":[{"title":"What is the use of app root in Angular?","content":"\nThe root app module is just the beginning. It is a necessary part of any Angular app, but it is also just the entry point to the rest of your app's feature modules.\n","section":"16. What is the use of app root in Angular?","source":"https://angular.io"}],"17. What is Ahead of Time (AOT) compiler ?":[{"title":"What is Ahead of Time (AOT) compiler ?","content":"\nwhen you serve/build your angular application, the Ahead of Time compiler converts your code during the build time before your browser downloads and runs that code. From Angular 9, by default compiling option is set to true for ahead of time compiler.\n","section":"17. What is Ahead of Time (AOT) compiler ?","source":"https://angular.io"}],"18. What is the Just in Time (JIT) compiler ?":[{"title":"What is the Just in Time (JIT) compiler ?","content":"\nJust in time compiler provides compilation during the execution of the program at a run time before execution. In simple words, code get compiles when it’s needed, not at the build time. Initially, compiler was responsible for converting a high-level language into machine language, which would then be converted into executable code.\nJust in time compiler, compiles code at runtime which means instead of interpreting byte code at build time, it will compile byte code when that component is called\n","section":"18. What is the Just in Time (JIT) compiler ?","source":"https://angular.io"}],"19. What is the entry point of Angular application?":[{"title":"What is the entry point of Angular application?","content":"\nA bootstrapped component is an entry component that Angular loads into the DOM during the bootstrap process (application launch). Other entry components are loaded dynamically by other means, such as with the router. Angular loads a root AppComponent dynamically because it's listed by type in @NgModule. bootstrap .\n","section":"19. What is the entry point of Angular application?","source":"https://angular.io"}],"2. What is TypeScript and why it is used?":[{"title":"What is TypeScript and why it is used?","content":"\nTypeScript is a programming language first developed by Microsoft in 2012. Its main ambition is to improve the productivity of developing complex applications.\nIt is an open-source language developed as a superset of JavaScript. What this means in simple terms is that any code valid in JavaScript is also valuable for TypeScript.\n\n### Example\n\n**Without typescript**\n\n```js\nvar x = 1\nvar y = 2\n```\n\n**With typescript**\n\n```ts\nvar x: number = 1\nvar y: number = 2\n```\n","section":"2. What is TypeScript and why it is used?","source":"https://www.codemotion.com/"}],"20. What is destroy in Angular?":[{"title":"What is destroy in Angular?","content":"\nA lifecycle hook that is called when a directive, pipe, or component is destroyed. The ngOnDestroy or OnDestroy hook is called just before the Component/Directive instance is destroyed by Angular. Use this hook to Perform any cleanup logic for the Component. This is the correct place where you would like to Unsubscribe Observables and detach event handlers to avoid memory leaks.\n","section":"20. What is destroy in Angular?","source":"https://angular.io"}],"21. What does bootstrapping in Angular mean?":[{"title":"What does bootstrapping in Angular mean?","content":"\nAngular bootstrapping is the process of initializing the Angular application. It is the first step in the application's lifecycle. Angular application are mainly bootstrapped from `main.ts` file. This file is the entry point for the application and is responsible for bootstrapping the application.\n","section":"21. What does bootstrapping in Angular mean?","source":"https://angular.io"}],"22. What is NgModule":[{"title":"What is NgModule ?","content":"\nNgModule is kind of a manager for the application. It is responsible for registering all the components, directives, pipes, etc. that are part of this module context. A application can have multiple modules. Each module is responsible for registering its own components, directives, pipes, etc. The core module imports all the other modules.\n\n**Example:**\n\n```typescript\n@NgModule({\n  declarations: [\n    ...\n  ],\n  imports: [\n    BrowserModule,\n    ...\n  ],\n  providers: [\n    ...\n  ],\n})\nexport class ExampleModule { }\n```\n\n**Note:** NgModule is a class that can be used to group components, directives, and pipes into an application and provide additional configuration options to those components.\n","section":"22. What is NgModule","source":"https://angular.io"}],"23. What are exports in NgModule?":[{"title":"What are exports in NgModule?","content":"\nWhen we went to share some feature with another module, we declare it in the exports array of the NgModule. This can be used in the other module to import the feature.\n\n**Parent module:**\n\n```typescript\n@NgModule({\n  declarations: [\n    ButtonComponent\n  ],\n  exports: [\n    ButtonComponent\n  ]\n})\n\nexport class ParentModule { }\n```\n\nWe export the button component from the parent module. So now other modules can use this button component if they import the parent module.\n\n**Child module:**\n\n```typescript\n@NgModule({\n  imports: [\n    ParentModule,\n  ],\n})\nexport class ChildModule { }\n```\n","section":"23. What are exports in NgModule?","source":"https://angular.io"}],"24. What are imports in NgModule?":[{"title":"What are imports in NgModule?","content":"\nWhen we need some feature from another module, We declare it in the imports array of the NgModule. Importing a module is a two-step process. First, we have to export the feature from the module we want to import. Second, we have to import the feature from the module we want to import.\n\n**Parent module:**\n\n```typescript\n@NgModule({\n  declarations: [\n    ButtonComponent\n  ],\n  exports: [\n    ButtonComponent\n  ]\n})\nexport class ParentModule { }\n```\n\n**Child module:**\n\n```typescript\n@NgModule({\n  imports: [\n    ParentModule,\n  ],\n})\nexport class ChildModule { }\n```\n\nThe above example first we export the ButtonComponent from the ParentModule and then we import it in the ChildModule. Now we can use the ButtonComponent in the ChildModules anywhere.\n","section":"24. What are imports in NgModule?","source":"https://angular.io"}],"25. What is  declaration in Angular Module?":[{"title":"What is  declaration in Angular Module ?","content":"\nIn Angular module, Declaration is a list that contains all the components, directives, pipes, and services that belong to the module.\n\n**Component:**  Component is a UI building block. A component is a self-contained piece of UI that only needs to be built once, and can be used multiple times in other parts of an application.\n\n```typescript\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app';\n}\n```\n\n**Directive:**  Directive are classes that contain a custom behavior. A directive is a behavior that can be attached to elements in the DOM.\n\n```typescript\n@Directive({\n  selector: '[appHighlight]'\n})\nexport class HighlightDirective {\n  constructor(el: ElementRef) {\n    el.nativeElement.style.backgroundColor = 'yellow';\n  }\n}\n```\n\n**Pipe:**  Pipes are a simple way to transform the values in an angular template.\n\n```typescript\n@Pipe({\n    name: 'reverse'\n})\nexport class ReversePipe implements PipeTransform {\n    transform(value: string) {\n    return value.split('').reverse().join('');\n    }\n}\n```\n","section":"25. What is  declaration in Angular Module?","source":"https://angular.io"}],"26. What is angular markup":[{"title":"What is angular markup ?","content":"\nAngular markup is a way to write HTML in angular. It is a superset of HTML where we can modify HTML elements before the are displayed. For example, we can add custom attributes `loop` over an array of items and display them in a list `if else` condition etc.\n\n**Example:**\n\n```html\n<ul>\n  <li *ngFor=\"let item of items\">\n    {{item}}\n  </li>\n</ul>\n<p *ngIf=\"items.length == 0\">\n  There are no items in the list.\n</p>\n```\n","section":"26. What is angular markup","source":"https://angular.io"}],"27. What is providers in angular ?":[{"title":"What is providers in angular ?","content":"\nAngular has an concept of services and services are used to share data between components and do external works like http requests and database connections. Providers has the all the services listed in the array.\n\n**Note:** Providers are contain only services blueprint not the services instance.\n\n**Example:**\n\n```typescript\n@NgModule({\n  providers: [\n    AuthService,\n    UserService,\n    AuthGuard\n  ]\n})\nexport class AppModule { }\n```\n","section":"27. What is providers in angular ?","source":"https://youtube.com"}],"28. What is injector in angular":[{"title":"What is injector in angular ?","content":"\nInjector is a container that holds all the instances of the services. Mainly Responsible for creating the instances of the services and injecting them into the components or services.\n","section":"28. What is injector in angular","source":"https://angular.io"}],"29. How angular injector works ?":[{"title":"How angular injector works ?","content":"\nThe Injector looks for the dependency in the Angular Providers using the Injection token. The Angular Providers array returns the Provider, which contains the information about how to create the instance of the dependency. The Injector creates the instance and injects it into the Component or service.\n","section":"29. How angular injector works ?","source":"https://www.tektutorialshub.com/angular/angular-injector-injectable-inject/#what-is-angular-injector"}],"3. What is Components?":[{"title":"What is Components?","content":"\nIn Angular, Components are the most basic UI building block of an Angular app. An Angular app contains a tree of Angular components. Angular components are a subset of directives, always associated with a template. Unlike other directives, only one component can be instantiated for a given element in a template.\n\n- Components are typically custom HTML elements, and each of these elements can instantiate only one component.\n- A TypeScript class is used to create a component. This class is then decorated with the `@Component` decorator. The decorator accepts a metadata object that gives information about the component.\n- A component must belong to the NgModule in order for it to be usable by another component or application.\n- Components control their runtime behavior by implementing Life-Cycle hooks.\n\n**Example of an Component**\n\n```TypeScript\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Angular';\n}\n```\n","section":"3. What is Components?","source":"https://angular.io"}],"30. When is Angular Injector is created":[{"title":"When is Angular Injector is created ?","content":"The angular injector is created when the application is bootstrapped.\n","section":"30. When is Angular Injector is created","source":"https://www.tektutorialshub.com/angular/angular-injector-injectable-inject/#what-is-angular-injector"}],"31. What is BrowserModule used for?":[{"title":"What is BrowserModule used for?","content":"\nBrowserModule provides services that are essential to launch and run a browser app. BrowserModule also re-exports CommonModule from @angular/common, which means that components in the AppModule module also have access to the Angular directives every app needs, such as NgIf and NgFor.\n","section":"31. What is BrowserModule used for?","source":"https://angular.io"}],"32. How do you define a component styles?":[{"title":"How do you define a component styles?","content":"\nAngular applications are styles with standard CSS syntax. Here we can use global styles, component styles, and inline styles.\n\n**Global styles**: Global styles are defined in the `<head>` of the HTML document. In angular global styles are `styles.css`. in root directory. Angular automatically injects the global styles into the `<head>` of the HTML document.\n\n```css\nh1 {\n  color: red;\n}\n```\n\n**Component styles**: Component styles are defined in the `styles` property of the component metadata.\n\n```ts\n@Component({\n  selector: 'my-app',\n  template: `\n    <h1>Hello {{name}}</h1>\n  `,\n  styles: [`h1 { color: red; }`]\n})\nexport class AppComponent {\n  name = 'Angular';\n}\n```\n\n**Inline styles**: Inline styles are defined HTML attributes.\n\n```html\n<div [style.background-color]=\"'yellow'\">\n  <h1>Hello {{name}}</h1>\n</div>\n```\n","section":"32. How do you define a component styles?","source":"https://angular.io"}],"33. How do you define a component template?":[{"title":"How do you define a component template?","content":"\nTo define a component template, you must use the `template` property in the component metadata. there are two ways to define a template: inline and external.\n\n**Inline template**\n\n```ts\n@Component({\n  selector: 'my-app',\n  template: `\n    <h1>Hello {{name}}</h1>\n  `\n})\nexport class AppComponent {\n  name = 'Angular';\n}\n```\n\n**External template**\n\n```ts\n@Component({\n  selector: 'my-app',\n  templateUrl: './app.component.html'\n})\nexport class AppComponent {\n  name = 'Angular';\n}\n```\n","section":"33. How do you define a component template?","source":"https://angular.io"}],"34. Why Use Property Binding?":[{"title":"Why Use Property Binding?","content":"Property binding helps us bind the values to a target property of an element enclosed within the square brackets. Property binding is the technique that will help us bind values to HTML elements’ properties.\n\n<details>\n  <summary>Example</summary>\n\n  ```ts\n@Component({\n    selector: 'my-app',\n    template: `\n    <input type=\"text\" [(ngModel)]=\"name\" />\n    `\n})\nclass AppComponent {\n    name = 'Angular';\n}\n```\n\n</details>\n","section":"34. Why Use Property Binding?","source":"https://angular.io"}],"35. What is Interpolation in angular ?":[{"title":"What is Interpolation in angular ?","content":"\n\nInterpolation in Angular is getting the data displayed inside the view. Interpolation allows us to combine calculated strings into the text between the HTML element tags and within the attribute assignments. Interpolation refers to embedding expressions into marked-up text. By default, interpolation uses its delimiter, the double curly braces, {{ and }}.\n\n<details>\n  <summary>Example</summary>\n  \n  ```ts\n@Component({\n    selector: 'my-app',\n    template: `\n    <h1>Hello {{name}}</h1>\n    `\n    })\nclass AppComponent {\n    name = 'Angular';\n}\n```\n","section":"35. What is Interpolation in angular ?","source":"https://angular.io"}],"36. Why we need attribute binding in angular":[{"title":"Why we need attribute binding in angular ?","content":"\nIf an attribute does't have corresponding DOM property then attribute binding are helpful to bind the attribute value to the DOM property.\n\n```html\n<table>\n\t<tr>\n\t\t<td [attr.colspan]=\"2\">\n\t\t\t<span>Hello</span>\n\t\t</td>\n\t</tr>\n</table>\n```\n","section":"36. Why we need attribute binding in angular","source":"https://angular.io"}],"37. What is event bind?":[{"title":"What is event bind?","content":"\nEvent binding lets you listen for and respond to user actions such as keystrokes, mouse movements, clicks, and touches.\n\n**Example:**\n\n```typescript\n@Component({\n\tselector: 'my-app',\n\ttemplate: ` <button (click)=\"onClick()\">Click me</button> `,\n})\nexport class AppComponent {\n\tonClick() {\n\t\talert('Hello World!')\n\t}\n}\n```\n","section":"37. What is event bind?","source":"https://angular.io"}],"38. Difference between One-way & Two-way Binding":[{"title":"Difference between One-way & Two-way Binding","content":"\nIn one-way binding, the flow is one-directional. In a two-way binding, the flow is two-directional. This means that the flow of code is from ts file to Html file. This means that the flow of code is from ts file to Html file as well as from Html file to ts file.\n\n**One-way binding**\n\n```ts\n@Component({\n\tselector: 'my-app',\n\ttemplate: `\n\t\t<input type=\"text\" (keyup)=\"onKeyUp($event)\" />\n\t\t<p>{{ values }}</p>\n\t`,\n})\nexport class AppComponent {\n\tvalues = ''\n\tonKeyUp(e) {\n\t\tthis.values += e.target.value\n\t}\n}\n```\n\n**Two-way binding**\n\n```ts\n@Component({\n\tselector: 'my-app',\n\ttemplate: `\n\t\t<input type=\"text\" [(ngModel)]=\"name\" />\n\t\t<p>Hello {{ name }}</p>\n\t`,\n})\nexport class AppComponent {\n\tname = 'Angular'\n}\n```\n","section":"38. Difference between One-way & Two-way Binding","source":"https://angular.io"}],"39. What is a pipe":[{"title":"What is a pipe","content":"\nPipes are a way to transform data in templates expressions before it is displayed. It's accepts data as input and returns transformed data as output.\n\n**Example**\n\n```ts\n@Pipe({ name: 'reverse' })\nexport class ReversePipe implements PipeTransform {\n\ttransform(value: any) {\n\t\treturn value.split('').reverse().join('')\n\t}\n}\n```\n\n```html\n<p>{{ 'Hello' | reverse }}</p>\n```\n","section":"39. What is a pipe","source":"https://angular.io"}],"4. What Is Angular?":[{"title":"What Is Angular?","content":"\nAngular is an open-source, JavaScript framework written in TypeScript. Google maintains it, and its primary purpose is to develop single-page applications. As a framework, Angular has clear advantages while also providing a standard structure for developers to work with. It enables users to create large applications in a maintainable manner.\n","section":"4. What Is Angular?","source":"https://www.simplilearn.com/"}],"40. What is structural directive and attribute directive in Angular?":[{"title":"What is structural directive and attribute directive in Angular?","content":"\nAttribute directives. Change the appearance or behavior of an element, component, or another directive. Structural directives. Change the DOM layout by adding and removing DOM elements.\n","section":"40. What is structural directive and attribute directive in Angular?","source":"https://angular.io"}],"41. What is injector in angular":[{"title":"What is injector in angular ?","content":"\nInjector are objects that are used to resolve dependencies. In angular a component when request a service it will be resolved by the injector. An injector is a kind of container that create service instance and provides them to the component.\n\n_Note:_ A injector has an cache mechanism that prevent to create service instance multiple times. This is useful when a service is used in multiple components and provides the same instance to all of them (Singleton).\n\n[Read more](https://angular.io/guide/dependency-injection)\n","section":"41. What is injector in angular","source":"https://angular.io"}],"42. What does @injectable decorator do?":[{"title":"What does @injectable decorator do?","content":"\nInjectable decorator is used to mark a class as available to be injected as a dependency. It's help to use other classes as a dependency in services. With injectable decorator we can tell Angular to inject other classes as a dependency.\n","section":"42. What does @injectable decorator do?","source":"https://angular.io"}],"5. What are the core building block of angular":[{"title":"What are the core building block of angular","content":"\nThe various building blocks of Angular are:\n\n- Components\n- Modules\n- Directives\n- Decorators\n- Pipes\n- Data Binding\n- Templates\n- Metadata\n- Services\n- Dependency Injection\n","section":"5. What are the core building block of angular","source":"https://angular.io"}],"6. Difference between Angular and AngularJS":[{"title":"Difference between Angular and AngularJS","content":"\nDifference between the AngularJS & Angular: Although, there are significant key differences between Angular JS & Angular:\n\n| AngularJS                                     | Angular                                                                           |\n| --------------------------------------------- | --------------------------------------------------------------------------------- |\n| It supports the Model-View-Controller design. | It uses components and directives. Components are the directives with a template. |\n| Written in JavaScript                         | Written in TypeScript                                                             |\n| Not a mobile friendly framework               | Angular is supported by all the popular mobile browsers.                          |\n| It does not use Dependency Injection.         | It support Dependency Injection.                                                  |\n","section":"6. Difference between Angular and AngularJS","source":"https://www.geeksforgeeks.org/"}],"7. What are templates in Angular":[{"title":"What are templates in Angular","content":"\nIn Angular, templates are the HTML that is used to render the application. It's responsible for the layout and content and how it is displayed in the UI. Every component has an HTML template that declares how that component renders. You define this template either inline or by file path. Angular extends HTML with additional syntax that lets you insert dynamic values from your component. Angular automatically updates the rendered DOM when your component's state changes.\n\n**Example of a angular template**\n\n```ts\n@Component({\n\tselector: 'my-app',\n\ttemplate: `\n\t\t<h1>Hello {{ name }}</h1>\n\t\t<p>This is some content</p>\n\t`,\n})\nexport class AppComponent {\n\tname = 'Angular'\n}\n```\n\nHere name is a property that is bound to the {{ name }} in the template. It's an syntax that is used to insert dynamic values into the template.\n","section":"7. What are templates in Angular","source":"https://angular.io"}],"8. What Is property binding in angular":[{"title":"What Is property binding in angular ?","content":"\nProperty binding in Angular helps you set values for properties of HTML elements or directives. Use property binding to do things such as toggle button functionality, set paths programmatically, and share values between components.\n\n**Example of Angular property binding**\n\n```ts\n@Component({\n\tselector: 'my-app',\n\ttemplate: ` <img [src]=\"imageUrl\" /> `,\n})\nexport class AppComponent {\n\timageUrl = 'https://picsum.photos/200/300'\n}\n```\n\nThe above code creates an Angular component that displays an image. The image's source is set to the value of the imageUrl property in the DOM node. A target property is the property of the DOM node that is set to the value of the imageUrl property.\n","section":"8. What Is property binding in angular","source":"https://angular.io"}],"9. What is the difference between properties and attributes in HTML?":[{"title":"What is the difference between properties and attributes in HTML?","content":"\nWhen writing HTML source code, you can define attributes on your HTML elements. Then, once the browser parses your code, a corresponding DOM node will be created. This node is an object, and therefore it has properties.\n\nFor instance, this HTML element:\n\n```html\n<input type=\"text\" name=\"name\" />\n```\n\nHas 2 attributes `(type and value)`.\nOnce the browser parses this code, a HTMLInputElement object will be created, and this object will contain dozens of properties like: accept, accessKey, align, alt, attributes, autofocus, baseURI, checked, childElementCount, childNodes, children, classList, className, clientHeight, etc.\n","section":"9. What is the difference between properties and attributes in HTML?","source":"https://stackoverflow.com"}]}